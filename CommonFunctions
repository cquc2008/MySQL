-- --------------------
-- 常见函数
-- --------------------
/*
+ 概念：
	类似于Java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名

+ 好处：
	- 隐藏了实现细节
    - 提高代码的重用性

+ 调用格式
	select 函数名（实参列表） 【from 表】；

+ 特点：
    - 叫什么（函数名）
    - 干什么（函数功能）

+ 分类：
	- 单行函数（concat，length，isnull）：
		* 字符函数
        * 数学函数
        * 日期函数
        * 其他函数（补充）
        * 流程控制函数（补充）

	- 分组函数
		* 功能：做统计使用，又称为统计函数、聚合函数、组函数
        * 分类：
            。 sum 求和
            。 avg 平均值
            。 max 最大值
            。 min 最小值
            。 count 计算个数
        * 特点：
            。 sum avg 一般处理数值型数据
            。 max min count 可以处理任何类型数据
            。 以上分组函数都忽略null值
            。 和 distinct 搭配 实现去重后处理数据
            。 count函数：一般使用 count（*） 统计行数；
            。 和分组函数一同查询的字段的限制




+ 常见函数：
    — 字符函数：
        * length
        * concat
        * trim
        * upper
        * lower
        * rpad
        * lpad
        * substr
        * instr
        * replace
    - 数学函数
        * round
        * ceil
        * floor
        * truncate
        * mod
    - 日期函数
        * new
        * curdate
        * curtime
        * year
        * month
        * monthname
        * day
        * hour
        * minute
        * second
        * str_to_date
        * date_format
    - 其他函数（补充）
        * version
        * database
        * user
    - 控制函数
        * if
        * case



*/-- 字符函数

# length : 获取参数值的字节个数
SELECT
	LENGTH( 'john' ) AS English;
SELECT
	LENGTH( '你好' ) AS 汉字;


# concat: 拼接字符串
SELECT
	CONCAT( last_name, ' ', first_name )
FROM
	employees;


# upper、lower
SELECT
	UPPER( 'happy birthday' );
SELECT
	lower( 'HAPPY NEW YEAR' );

SELECT
    CONCAT(UPPER(last_name),' ',LOWER(first_name)) as out_put
FROM
    employees;


# substr、substring:截取字符
select substr('李莫愁爱上了陆展元',7); # 截取从指定索引处后面所有字符（注意索引是从1开始而非0）

select substr('李莫愁爱上了陆展元',1,3); #截取从指定索引处指定长度的字符


-- 姓名中首字符大写，其他字符小写，然后用下滑杠连接
select
    concat(upper(substr(last_name,1,1)),'_',lower(substr(last_name,2))) as out_put
from
    employees;


# instr : 返回子串第一次出现的索引，如果找不到返回0
select instr('杨不悔爱上了殷六侠','殷六侠') as out_put;


# trim : 去除字符串前面和后面指定的字符，默认为去除空格
select trim('     张翠山       ') as out_put;
select trim('a' from 'aaaaaaaaaa大笑aaaaaaaaaa') as out_put;


# lpad ： 用指定的字符实现左填充指定长度
select lpad('Jack',10,'*') as out_put;


# rpad: 用指定的字符实现右填充指定长度
select rpad('Honry',10,'#') as out_put;


# replace: 替换
select replace('Jack loves Anna','Anna','Alis') as out_put;





-- ----------------------------------------------------------------------------
-- 数学函数
-- ----------------------------------------------------------------------------
# round 四舍五入
select round(1.26);
select round(1.62);
select round(-1.26);
select round(-1.62);

select round(1.295,1);
select round(1.297,2);
select round(1.297,0);
select round(22.56,-1);


# ceil : 向上取整,返回大于等于该参数的最小整数
select ceil(1.24);
select ceil(-1.24);


# floor : 向下取整
select floor(1.95);
select floor(-1.95);


# truncate : 截断
select truncate(1.93521,3);


# mod: 取模 或者 取余; 被除数为正则结果为正，被除数为负则结果为负
select mod(10,3);
select mod(-10,3);
select mod(-10,-3);

select 10%3;



-- --------------------------------------------------
-- 日期函数
-- --------------------------------------------------
# now ： 返回当前系统日期 + 时间
select now();      # 返回字符型结果
select now() + 0;  # 返回数值型结果


# curdate ： 返回当前的日期
select curdate();     # 返回字符型结果
select curdate() + 0; # 返回数值型结果


# curtime ： 返回当前的时间
select curtime();     # 返回字符型结果
select curtime() + 0; # 返回数值型结果


# 用来获取指定的年、月、日、小时、分钟、秒的函数
select year(now()); # 获取年
select year('1991-01-12');

select month(curdate()) ; # 获取月
select monthname(curdate()); # 返回月的名称


select day(now()); # 获取日信息

select hour(now()); # 获取小时信息

select minute(now()); # 获取分钟信息

select second(now()); # 获取秒信息



# str_to_date : 将日期格式的字符转换成指定格式的日期
select str_to_date('04/30/2020','%m/%d/%y'); # 小写y为两位表示年
select str_to_date('04-30-1920','%m-%d-%Y'); # 大写Y 为四位表示年

select *
from employees
where hire_date = str_to_date('04-03-1992','%c-%d-%Y');


# date_format : 将日期转化为字符
select date_format(str_to_date('01/31/2020','%c/%d/%Y'),'%Y年-%c月-%d日');
select date_format(now(),'%Y年%m月%d日');

select last_name, date_format(hire_date,'%m月%d日 %Y年')
from employees;


-- --------------------------------------------------
-- 其它函数
-- --------------------------------------------------
# version ： 查询版本号
select version();

# database: 查询当前数据库名
select database();

# user : 查询当前用户
select user();


-- --------------------------------------------------
-- 流程控制函数
-- --------------------------------------------------
# if 函数：if else的效果
select if(10<5,'大','小');   # if 10<5 is true, show '大'， else show '小'

select last_name, commission_pct, if(isnull(commission_pct),'没奖金','有奖金') as 备注
from employees;


# case 函数：
/*
 用法一： switch case 的效果
    case 要判断的字段或表达式
        when 常量1 then 要显示的值1 或语句1
        when 常量2 then 要显示的值2 或语句2
        ...
        else 要显示的值 n 或语句 n
    end


 用法二：类似于 多重 if 语句
    case
        when 条件1 then 要显示的值1 或语句2
        when 条件2 then 要显示的值2 或语句2
        ...
        else 要显示的值n 或语句n
    end



 */

/*案例：查询员工的工资，要求：
  部门号=30，显示的工资为原工资的1.1倍
  部门号=40，显示的工资为原工资的1.2倍
  部门号=50，显示的工资为原工资的1.3倍
  其他的部门，显示为原工资
 */
select salary, department_id,
       case department_id
           when 30 then salary*1.1
           when 40 then salary*1.2
           when 50 then salary*1.3
           else salary
       end as salary_new
from employees;


/*案例：查询员工的工资情况
  如果工资大于20000，显示A级别
  如果工资大于15000，显示B级别
  如果工资大于10000，显示C级别
  其他显示D级别
 */
select salary,
       case
           when salary > 20000 then 'Class A'
           when salary > 15000 then 'Class B'
           when salary > 10000 then 'Class C'
           else 'Class D'
       end as Class_Salary
from employees;


-- ----------------------------------------------------------
-- 单行函数 案例
-- -------------------------------------------------------------
#案例1 显示系统时间
select now();

#案例2 查询员工号，姓名，工资，以及工资提高百分之20%后的结果
select employee_id, last_name,salary, salary*1.2 as salary_update
from employees;


#案例3 将员工的姓名按首字母排列，并写出姓名的长度
select length(last_name) as length_name,substr(last_name,1,1) as first_letter,last_name
from employees
order by first_letter;


#案例4 做一个查询，产生下面的结果
/*
<last_name> earns <salary> monthly but wants <salary*3>
dream salary
 */
select concat(last_name,' earns ',salary,' monthly but wants ',salary*3)
from employees;


#案例5 使用case-when，按照下面条件：
/*job           grade
AD_PRES         A
ST_MAN          B
IT_PROG         C
 */
select job_id as job,
       case job_id
           when 'AD_PRES' THEN 'A'
           WHEN 'ST_MAN' THEN 'B'
           WHEN 'IT_PROG' THEN 'C'
           when 'SA_REP' THEN 'D'
           WHEN 'ST_CLERK' THEN 'E'
       END AS Grade
from employees;


-- -------------------------------------------------------------------------
-- -------------------------------------------------------------------------
-- 分组函数
-- -------------------------------------------------------------------------
-- -------------------------------------------------------------------------
# 简单的使用
select sum(salary) from employees;
select avg(salary) from employees;
select min(salary) from employees;
select max(salary) from employees;
select count(salary) from employees;

select sum(salary) as total_sum,avg(salary) as average_salary, count(salary) as number
from employees;

select round(avg(salary),2) from employees;


# 和distinct 搭配
select sum(distinct salary),sum(salary) from employees;

select count(*) from employees; # 用于统计表的行数

select avg(salary),employee_id from employees; # 和分组函数一同查询的字段


select max(salary),min(salary),avg(salary),sum(salary) from employees;
select datediff(now(),'1983-01-31')/365;

select datediff(max(hire_date),min(hire_date)) from employees;

select count(*) from employees where department_id = 90;
